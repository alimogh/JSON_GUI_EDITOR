/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author developer
 */

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.reflect.TypeToken;
import java.util.*;
import javax.swing.JTree;
import jdk.nashorn.internal.parser.JSONParser;

public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        hostnameTextField = new javax.swing.JTextField();
        port_wsSpinner = new javax.swing.JSpinner();
        clientportSpinner = new javax.swing.JSpinner();
        jPanel3 = new javax.swing.JPanel();
        debugCheckBox = new javax.swing.JCheckBox();
        botdelaySpinner = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        intervaltickerupdateSpinner = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();
        periodstoragetickerSpinner = new javax.swing.JSpinner();
        jLabel7 = new javax.swing.JLabel();
        timeoutbuySpinner = new javax.swing.JSpinner();
        jLabel8 = new javax.swing.JLabel();
        timeoutsellSpinner = new javax.swing.JSpinner();
        jLabel9 = new javax.swing.JLabel();
        tvgainSpinner = new javax.swing.JSpinner();
        jLabel10 = new javax.swing.JLabel();
        tvtradinglimitbuySpinner = new javax.swing.JSpinner();
        tvpyramidCheckBox = new javax.swing.JCheckBox();
        tvtradinglimitsellSpinner = new javax.swing.JSpinner();
        jLabel11 = new javax.swing.JLabel();
        tvprotectionCheckBox = new javax.swing.JCheckBox();
        retrytvorderCheckBox = new javax.swing.JCheckBox();
        verboseCheckBox = new javax.swing.JCheckBox();
        watchmodeCheckBox = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        exchangesTable = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        pairsTree = new javax.swing.JTree();
        jPanel6 = new javax.swing.JPanel();
        enabledCheckBox = new javax.swing.JCheckBox();
        jLabel12 = new javax.swing.JLabel();
        authorizedfromsTextField = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        userTextField = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        passwordTextField = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        hostTextField = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        port_imaglistenerSpinner = new javax.swing.JSpinner();
        tlsCheckBox = new javax.swing.JCheckBox();
        rejectunauthorizedCheckBox = new javax.swing.JCheckBox();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        strategiesTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        boughtpriceTextField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("JSON Editor");
        setResizable(false);

        jLabel1.setText("port:");

        jLabel2.setText("clientport:");

        jLabel3.setText("hostname:");

        hostnameTextField.setText("127.0.0.1");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addGap(60, 60, 60)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(hostnameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE)
                    .addComponent(port_wsSpinner)
                    .addComponent(clientportSpinner))
                .addContainerGap(407, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(port_wsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(clientportSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(hostnameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(272, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("ws", jPanel2);

        debugCheckBox.setText("debug");

        jLabel4.setText("BOT_DELAY:");

        jLabel5.setText("interval_ticker_update:");

        jLabel6.setText("period_storage_ticker:");

        jLabel7.setText("timeout_buy:");

        jLabel8.setText("timeout_sell:");

        jLabel9.setText("TV_GAIN:");

        tvgainSpinner.setModel(new javax.swing.SpinnerNumberModel(0.0f, null, null, 0.1f));

        jLabel10.setText("TV_TRADING_LIMIT_BUY:");

        tvtradinglimitbuySpinner.setModel(new javax.swing.SpinnerNumberModel(0.0f, null, null, 0.001f));

        tvpyramidCheckBox.setText("TV_PYRAMID");

        tvtradinglimitsellSpinner.setModel(new javax.swing.SpinnerNumberModel(0.0f, null, null, 0.001f));

        jLabel11.setText("TV_TRADING_LIMIT_SELL:");

        tvprotectionCheckBox.setText("TV_PROTECTION");

        retrytvorderCheckBox.setText("RETRY_TV_ORDER");

        verboseCheckBox.setText("VERBOSE");

        watchmodeCheckBox.setText("WATCH_MODE");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel10)
                    .addComponent(jLabel9)
                    .addComponent(jLabel8)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel7)
                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel11))
                .addGap(39, 39, 39)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(botdelaySpinner)
                        .addComponent(intervaltickerupdateSpinner)
                        .addComponent(periodstoragetickerSpinner)
                        .addComponent(timeoutbuySpinner)
                        .addComponent(timeoutsellSpinner)
                        .addComponent(tvgainSpinner)
                        .addComponent(tvtradinglimitbuySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(tvtradinglimitsellSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 110, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tvprotectionCheckBox)
                    .addComponent(retrytvorderCheckBox)
                    .addComponent(watchmodeCheckBox)
                    .addComponent(debugCheckBox)
                    .addComponent(tvpyramidCheckBox)
                    .addComponent(verboseCheckBox))
                .addGap(139, 139, 139))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botdelaySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(debugCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(intervaltickerupdateSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tvpyramidCheckBox))
                .addGap(23, 23, 23)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(periodstoragetickerSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tvprotectionCheckBox))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(timeoutbuySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(retrytvorderCheckBox))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(timeoutsellSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(verboseCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(tvgainSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(watchmodeCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(tvtradinglimitbuySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(tvtradinglimitsellSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(111, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("bot", jPanel3);

        exchangesTable.setAutoCreateRowSorter(true);
        exchangesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"bittrex", "YOUR_API_KEY_HERE", "YOUR_SECRET_KEY_HERE"},
                {"cryptopia", "YOUR_API_KEY_HERE", "YOUR_SECRET_KEY_HERE"},
                {"kraken", "YOUR_API_KEY_HERE", "YOUR_SECRET_KEY_HERE"},
                {"poloniex", "YOUR_API_KEY_HERE", "YOUR_SECRET_KEY_HERE"}
            },
            new String [] {
                "Name", "key", "secret"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        exchangesTable.setRowSelectionAllowed(false);
        jScrollPane1.setViewportView(exchangesTable);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 658, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("exchanges", jPanel4);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("pairs");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("bittrex");
        javax.swing.tree.DefaultMutableTreeNode treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("BTC-LTC");
        javax.swing.tree.DefaultMutableTreeNode treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("strategy:bb");
        treeNode3.add(treeNode4);
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("BTC-ETH");
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("strategy:bb");
        treeNode3.add(treeNode4);
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("BTC-XRP");
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("strategy:bb");
        treeNode3.add(treeNode4);
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("poloniex");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("BTC-LTC");
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("strategy:bb");
        treeNode3.add(treeNode4);
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("BTC-ETH");
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("strategy:bb");
        treeNode3.add(treeNode4);
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("BTC-XRP");
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("strategy:bb");
        treeNode3.add(treeNode4);
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("kraken");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("BTC-LTC");
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("strategy:bb");
        treeNode3.add(treeNode4);
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("BTC-ETH");
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("strategy:bb");
        treeNode3.add(treeNode4);
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("BTC-XRP");
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("strategy:bb");
        treeNode3.add(treeNode4);
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("cryptopia");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("BTC-LTC");
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("strategy:bb");
        treeNode3.add(treeNode4);
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("BTC-ETH");
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("strategy:bb");
        treeNode3.add(treeNode4);
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("BTC-XRP");
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("strategy:bb");
        treeNode3.add(treeNode4);
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        pairsTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        pairsTree.setEditable(true);
        pairsTree.setRootVisible(false);
        jScrollPane4.setViewportView(pairsTree);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 648, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 449, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("pairs", jPanel5);

        enabledCheckBox.setText("enabled");

        jLabel12.setText("authorized_froms:");

        authorizedfromsTextField.setText("[\"noreply@tradingview.com\"]");

        jLabel13.setText("user:");

        userTextField.setText("YOUR_EMAIL_HERE");

        jLabel14.setText("password:");

        passwordTextField.setText("YOUR_PASSWORD_HERE");

        jLabel15.setText("host:");

        hostTextField.setText("imap.gmail.com");

        jLabel16.setText("port:");

        tlsCheckBox.setText("tls");

        rejectunauthorizedCheckBox.setText("rejectUnauthorized");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel16)
                    .addComponent(jLabel15)
                    .addComponent(jLabel14)
                    .addComponent(jLabel13)
                    .addComponent(jLabel12))
                .addGap(34, 34, 34)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(enabledCheckBox)
                    .addComponent(port_imaglistenerSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(jPanel6Layout.createSequentialGroup()
                            .addComponent(tlsCheckBox)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                            .addComponent(rejectunauthorizedCheckBox))
                        .addComponent(authorizedfromsTextField, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(userTextField, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(passwordTextField, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(hostTextField, javax.swing.GroupLayout.Alignment.LEADING)))
                .addContainerGap(291, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addComponent(enabledCheckBox)
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(authorizedfromsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(userTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(passwordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(hostTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(port_imaglistenerSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tlsCheckBox)
                    .addComponent(rejectunauthorizedCheckBox))
                .addContainerGap(134, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("imag_listener", jPanel6);

        jScrollPane3.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        strategiesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"bb",  new Double(0.001),  new Double(15.0),  new Double(0.1),  new Double(0.6),  new Double(16.0),  new Double(8.0),  new Double(40.0),  new Double(40.0),  new Double(2.0),  new Double(50.0),  new Double(0.6),  new Double(2.0),  new Double(70.0),  new Double(0.6),  new Double(2.0),  new Double(70.0),  new Double(2.0),  new Double(2.0),  new Double(5.0),  new Double(250.0),  new Double(1.0E-8),  new Double(1.0E-8),  new Double(0.12345678),  new Boolean(false), null,  new Double(60.0),  new Boolean(true),  new Double(1.0E-4),  new Double(1.0E-4)},
                {"gain",  new Double(0.001),  new Double(15.0),  new Double(0.1),  new Double(0.6),  new Double(16.0),  new Double(8.0),  new Double(40.0),  new Double(40.0),  new Double(2.0),  new Double(50.0),  new Double(0.6),  new Double(2.0),  new Double(70.0),  new Double(0.6),  new Double(2.0),  new Double(70.0),  new Double(2.0),  new Double(2.0),  new Double(5.0),  new Double(250.0),  new Double(1.0E-8),  new Double(1.0E-8),  new Double(0.12345678), null, null,  new Double(60.0),  new Boolean(true),  new Double(1.0E-4),  new Double(1.0E-4)},
                {"pp",  new Double(0.001),  new Double(15.0),  new Double(0.1),  new Double(0.6),  new Double(16.0),  new Double(8.0),  new Double(40.0),  new Double(40.0),  new Double(2.0),  new Double(50.0),  new Double(0.6),  new Double(2.0),  new Double(70.0),  new Double(0.6),  new Double(2.0),  new Double(70.0),  new Double(2.0),  new Double(2.0),  new Double(5.0),  new Double(250.0),  new Double(1.0E-8),  new Double(1.0E-8),  new Double(0.12345678), null, null,  new Double(60.0),  new Boolean(true),  new Double(1.0E-4),  new Double(1.0E-4)},
                {"strepgain",  new Double(0.001),  new Double(15.0),  new Double(0.1),  new Double(0.6),  new Double(16.0),  new Double(8.0),  new Double(40.0),  new Double(40.0),  new Double(2.0),  new Double(50.0),  new Double(0.6),  new Double(2.0),  new Double(70.0),  new Double(0.6),  new Double(2.0),  new Double(70.0),  new Double(2.0),  new Double(2.0),  new Double(5.0),  new Double(250.0),  new Double(1.0E-8),  new Double(1.0E-8),  new Double(0.12345678), null, null,  new Double(60.0),  new Boolean(true),  new Double(1.0E-4),  new Double(1.0E-4)},
                {"bbgain",  new Double(0.001),  new Double(15.0),  new Double(0.1),  new Double(0.6),  new Double(16.0),  new Double(8.0),  new Double(40.0),  new Double(40.0),  new Double(2.0),  new Double(50.0),  new Double(0.6),  new Double(2.0),  new Double(70.0),  new Double(0.6),  new Double(2.0),  new Double(70.0),  new Double(2.0),  new Double(2.0),  new Double(5.0),  new Double(250.0),  new Double(1.0E-8),  new Double(1.0E-8),  new Double(0.12345678), null, null,  new Double(60.0),  new Boolean(true),  new Double(1.0E-4),  new Double(1.0E-4)},
                {"gainbb",  new Double(0.001),  new Double(15.0),  new Double(0.1),  new Double(0.6),  new Double(16.0),  new Double(8.0),  new Double(40.0),  new Double(40.0),  new Double(2.0),  new Double(50.0),  new Double(0.6),  new Double(2.0),  new Double(70.0),  new Double(0.6),  new Double(2.0),  new Double(70.0),  new Double(2.0),  new Double(2.0),  new Double(5.0),  new Double(250.0),  new Double(1.0E-8),  new Double(1.0E-8),  new Double(0.12345678), null, null,  new Double(60.0),  new Boolean(true),  new Double(1.0E-4),  new Double(1.0E-4)},
                {"bbstepgain",  new Double(0.001),  new Double(15.0),  new Double(0.1),  new Double(0.6),  new Double(16.0),  new Double(8.0),  new Double(40.0),  new Double(40.0),  new Double(2.0),  new Double(50.0),  new Double(0.6),  new Double(2.0),  new Double(70.0),  new Double(0.6),  new Double(2.0),  new Double(70.0),  new Double(2.0),  new Double(2.0),  new Double(5.0),  new Double(250.0),  new Double(1.0E-8),  new Double(1.0E-8),  new Double(0.12345678), null, null,  new Double(60.0),  new Boolean(true),  new Double(1.0E-4),  new Double(1.0E-4)},
                {"stepgainbb",  new Double(0.001),  new Double(15.0),  new Double(0.1),  new Double(0.6),  new Double(16.0),  new Double(8.0),  new Double(40.0),  new Double(40.0),  new Double(2.0),  new Double(50.0),  new Double(0.6),  new Double(2.0),  new Double(70.0),  new Double(0.6),  new Double(2.0),  new Double(70.0),  new Double(2.0),  new Double(2.0),  new Double(5.0),  new Double(250.0),  new Double(1.0E-8),  new Double(1.0E-8),  new Double(0.12345678), null, null,  new Double(60.0),  new Boolean(true),  new Double(1.0E-4),  new Double(1.0E-4)},
                {"bbpp",  new Double(0.001),  new Double(15.0),  new Double(0.1),  new Double(0.6),  new Double(16.0),  new Double(8.0),  new Double(40.0),  new Double(40.0),  new Double(2.0),  new Double(50.0),  new Double(0.6),  new Double(2.0),  new Double(70.0),  new Double(0.6),  new Double(2.0),  new Double(70.0),  new Double(2.0),  new Double(2.0),  new Double(5.0),  new Double(250.0),  new Double(1.0E-8),  new Double(1.0E-8),  new Double(0.12345678), null, null,  new Double(60.0),  new Boolean(true),  new Double(1.0E-4),  new Double(1.0E-4)},
                {"ppbb",  new Double(0.001),  new Double(15.0),  new Double(0.1),  new Double(0.6),  new Double(16.0),  new Double(8.0),  new Double(40.0),  new Double(40.0),  new Double(2.0),  new Double(50.0),  new Double(0.6),  new Double(2.0),  new Double(70.0),  new Double(0.6),  new Double(2.0),  new Double(70.0),  new Double(2.0),  new Double(2.0),  new Double(5.0),  new Double(250.0),  new Double(1.0E-8),  new Double(1.0E-8),  new Double(0.12345678), null, null,  new Double(60.0),  new Boolean(true),  new Double(1.0E-4),  new Double(1.0E-4)},
                {"gainstepgain",  new Double(0.001),  new Double(15.0),  new Double(0.1),  new Double(0.6),  new Double(16.0),  new Double(8.0),  new Double(40.0),  new Double(40.0),  new Double(2.0),  new Double(50.0),  new Double(0.6),  new Double(2.0),  new Double(70.0),  new Double(0.6),  new Double(2.0),  new Double(70.0),  new Double(2.0),  new Double(2.0),  new Double(5.0),  new Double(250.0),  new Double(1.0E-8),  new Double(1.0E-8),  new Double(0.12345678), null, null,  new Double(60.0),  new Boolean(true),  new Double(1.0E-4),  new Double(1.0E-4)},
                {"stepgaingain",  new Double(0.001),  new Double(15.0),  new Double(0.1),  new Double(0.6),  new Double(16.0),  new Double(8.0),  new Double(40.0),  new Double(40.0),  new Double(2.0),  new Double(50.0),  new Double(0.6),  new Double(2.0),  new Double(70.0),  new Double(0.6),  new Double(2.0),  new Double(70.0),  new Double(2.0),  new Double(2.0),  new Double(5.0),  new Double(250.0),  new Double(1.0E-8),  new Double(1.0E-8),  new Double(0.12345678), null, null,  new Double(60.0),  new Boolean(true),  new Double(1.0E-4),  new Double(1.0E-4)},
                {"gainpp",  new Double(0.001),  new Double(15.0),  new Double(0.1),  new Double(0.6),  new Double(16.0),  new Double(8.0),  new Double(40.0),  new Double(40.0),  new Double(2.0),  new Double(50.0),  new Double(0.6),  new Double(2.0),  new Double(70.0),  new Double(0.6),  new Double(2.0),  new Double(70.0),  new Double(2.0),  new Double(2.0),  new Double(5.0),  new Double(250.0),  new Double(1.0E-8),  new Double(1.0E-8),  new Double(0.12345678), null, null,  new Double(60.0),  new Boolean(true),  new Double(1.0E-4),  new Double(1.0E-4)},
                {"ppgain",  new Double(0.001),  new Double(15.0),  new Double(0.1),  new Double(0.6),  new Double(16.0),  new Double(8.0),  new Double(40.0),  new Double(40.0),  new Double(2.0),  new Double(50.0),  new Double(0.6),  new Double(2.0),  new Double(70.0),  new Double(0.6),  new Double(2.0),  new Double(70.0),  new Double(2.0),  new Double(2.0),  new Double(5.0),  new Double(250.0),  new Double(1.0E-8),  new Double(1.0E-8),  new Double(0.12345678), null, null,  new Double(60.0),  new Boolean(true),  new Double(1.0E-4),  new Double(1.0E-4)},
                {"stepgainpp",  new Double(0.001),  new Double(15.0),  new Double(0.1),  new Double(0.6),  new Double(16.0),  new Double(8.0),  new Double(40.0),  new Double(40.0),  new Double(2.0),  new Double(50.0),  new Double(0.6),  new Double(2.0),  new Double(70.0),  new Double(0.6),  new Double(2.0),  new Double(70.0),  new Double(2.0),  new Double(2.0),  new Double(5.0),  new Double(250.0),  new Double(1.0E-8),  new Double(1.0E-8),  new Double(0.12345678), null, null,  new Double(60.0),  new Boolean(true),  new Double(1.0E-4),  new Double(1.0E-4)},
                {"ppstepgain",  new Double(0.001),  new Double(15.0),  new Double(0.1),  new Double(0.6),  new Double(16.0),  new Double(8.0),  new Double(40.0),  new Double(40.0),  new Double(2.0),  new Double(50.0),  new Double(0.6),  new Double(2.0),  new Double(70.0),  new Double(0.6),  new Double(2.0),  new Double(70.0),  new Double(2.0),  new Double(2.0),  new Double(5.0),  new Double(250.0),  new Double(1.0E-8),  new Double(1.0E-8),  new Double(0.12345678), null, null,  new Double(60.0),  new Boolean(true),  new Double(1.0E-4),  new Double(1.0E-4)}
            },
            new String [] {
                "Name", "TRADING_LIMIT", "PERIOD", "BUY_LEVEL", "GAIN", "EMA1", "EMA2", "HIGH_BB", "LOW_BB", "STDV", "SMAPERIOD", "BUYLVL1", "BUYLVL2", "BUYLVL3", "SELLLVL1", "SELLLVL2", "SELLLVL3", "BUYLVL", "SELLLVL", "LASTPOINTS", "AVGPOINTS", "AVGMINIMUM", "PP_BUY", "PP_SELL", "PANIC_SELL", "DOUBLE_UP", "STOP_LIMIT", "BUY_ENABLE", "MIN_VOLUME_TO_BUY", "MIN_VOLUME_TO_SELL"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Double.class, java.lang.Boolean.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        strategiesTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane3.setViewportView(strategiesTable);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 668, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 5, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("strategies", jPanel7);

        jLabel17.setText("BOUGHT_PRICE:");

        boughtpriceTextField.setText("0.104744");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addComponent(jLabel17)
                .addGap(45, 45, 45)
                .addComponent(boughtpriceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(372, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(boughtpriceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(360, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("optionals", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName("tab1");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MainFrame mainFrame = new MainFrame();
                mainFrame.setVisible(true);
                System.out.println(mainFrame.getJsonString());
                mainFrame.readJSON(mainFrame.getJsonString());
            }
        });
    }

    public String getJsonString() {
        Gson gsonObj = new Gson();
        String jsonString = gsonObj.toJson(getMap());
        return jsonString;
    }
    
    public HashMap<String, Object> getMap() {
        HashMap<String, Object> resultMap = new HashMap<>();
        
        resultMap.put("ws", (Object)getMap_ws());
        resultMap.put("bot", (Object)getMap_bot());
        resultMap.put("exchanges", (Object)getMap_exchanges());
        resultMap.put("pairs", (Object)getMap_pairs());
        resultMap.put("imap_listener", (Object)getMap_imap_listener());
        resultMap.put("strategies", (Object)getMap_strategies());
        resultMap.put("optionals", (Object)getMap_optioanal());
        
        return resultMap;
    }
    
    public HashMap<String, Object> getMap_ws() {
        HashMap<String, Object> wsMap = new HashMap<>();
        
        wsMap.put("port", (Object)port_wsSpinner.getValue());
        wsMap.put("clientport", (Object)clientportSpinner.getValue());
        wsMap.put("hostname", (Object)hostnameTextField.getText());
        
        return wsMap;
    }
    
    public HashMap<String, Object> getMap_bot() {
        HashMap<String, Object> botMap = new HashMap<>();
        
        botMap.put("debug", (Object)debugCheckBox.isSelected());
        botMap.put("BOT_DELAY", (Object)botdelaySpinner.getValue());
        botMap.put("interval_ticker_update", (Object)intervaltickerupdateSpinner.getValue());
        botMap.put("period_storage_ticker", (Object)periodstoragetickerSpinner.getValue());
        botMap.put("timeout_buy", (Object)timeoutbuySpinner.getValue());
        botMap.put("timeout_sell", (Object)timeoutsellSpinner.getValue());
        botMap.put("TV_GAIN", (Object)tvgainSpinner.getValue());
        botMap.put("TV_TRADING_LIMIT_BUY", (Object)tvtradinglimitbuySpinner.getValue());
        botMap.put("TV_PYRAMID", (Object)tvpyramidCheckBox.isSelected());
        botMap.put("TV_TRADING_LIMIT_SELL", (Object)tvtradinglimitsellSpinner.getValue());
        botMap.put("TV_PROTECTION", (Object)tvprotectionCheckBox.isSelected());
        botMap.put("RETRY_TV_ORDER", (Object)retrytvorderCheckBox.isSelected());
        botMap.put("VERBOSE", (Object)verboseCheckBox.isSelected());
        botMap.put("WATCH_MODE", (Object)watchmodeCheckBox.isSelected());
        
        return botMap;
    }
    
    public HashMap<String, Object> getMap_exchanges() {
        HashMap<String, Object> exchangesMap = new HashMap<>();
        
        HashMap<String, Object> bittrexMap = new HashMap<>();
        bittrexMap.put("key", (Object)exchangesTable.getValueAt(0, 1));
        bittrexMap.put("secret", (Object)exchangesTable.getValueAt(0, 2));
        exchangesMap.put("bittrex", (Object)bittrexMap);
        
        HashMap<String, Object> cryptopiaMap = new HashMap<>();
        cryptopiaMap.put("key", (Object)exchangesTable.getValueAt(0, 1));
        cryptopiaMap.put("secret", (Object)exchangesTable.getValueAt(0, 2));
        exchangesMap.put("cryptopia", (Object)cryptopiaMap);
        
        HashMap<String, Object> krakenMap = new HashMap<>();
        krakenMap.put("key", (Object)exchangesTable.getValueAt(0, 1));
        krakenMap.put("secret", (Object)exchangesTable.getValueAt(0, 2));
        exchangesMap.put("kraken", (Object)krakenMap);
        
        HashMap<String, Object> poloniexMap = new HashMap<>();
        poloniexMap.put("key", (Object)exchangesTable.getValueAt(0, 1));
        poloniexMap.put("secret", (Object)exchangesTable.getValueAt(0, 2));
        exchangesMap.put("poloniex", (Object)poloniexMap);
        
        return exchangesMap;
    }
    
    public HashMap<String, Object> getMap_pairs() {
        javax.swing.tree.TreeNode root = (javax.swing.tree.TreeNode)pairsTree.getModel().getRoot();
        HashMap<String, Object> pairsMap = parseMap(root);
        return pairsMap;
    }
    
    private HashMap<String, Object> parseMap(javax.swing.tree.TreeNode node) {
        HashMap<String, Object> nodeMap = new HashMap<>();
        
        int nCount = node.getChildCount();
        
        for (int i = 0; i < nCount ;i ++) {
            javax.swing.tree.TreeNode child = node.getChildAt(i);
            if (child.isLeaf()) {
                String strLeaf = node.toString();
                int seperator = strLeaf.indexOf(':');
                if (seperator == -1) {
                    continue;
                }
                else {
                    String strKey = strLeaf.substring(0, seperator).trim();
                    String strValue = strLeaf.substring(seperator);
                    nodeMap.put(strKey, (Object)strValue);
                }
            }
            else {
                String strKey = child.toString();
                HashMap<String, Object> mapValue = parseMap(child);
                nodeMap.put(strKey, (Object)mapValue);
            }
        }
        
        return nodeMap;
    }
    
    public HashMap<String, Object> getMap_imap_listener() {
        HashMap<String, Object> imap_listenerMap = new HashMap<>();
        
        imap_listenerMap.put("enabled", (Object)enabledCheckBox.isSelected());
        imap_listenerMap.put("authorized_froms", (Object)authorizedfromsTextField.getText());
        imap_listenerMap.put("user", (Object)userTextField.getText());
        imap_listenerMap.put("password", (Object)passwordTextField.getText());
        imap_listenerMap.put("host", (Object)hostTextField.getText());
        imap_listenerMap.put("port", (Object)port_imaglistenerSpinner.getValue());
        imap_listenerMap.put("tls", (Object)tlsCheckBox.isSelected());
        if(tlsCheckBox.isSelected()) {
            HashMap<String, Object> tlsOptionsMap = new HashMap<>();
            tlsOptionsMap.put("rejectUnauthorized", (Object)rejectunauthorizedCheckBox.isSelected());
            imap_listenerMap.put("tlsOptions", (Object)tlsOptionsMap);
        }
        
        return imap_listenerMap;
    }
    
    public HashMap<String, Object> getMap_strategies() {
        HashMap<String, Object> strategiesMap = new HashMap<>();
        
        int nCount = strategiesTable.getRowCount();
        for(int i = 0; i < nCount; i ++) {
            HashMap<String, Object> itemMap = new HashMap<>();
            itemMap.put("TRADING_LIMIT", (Object)strategiesTable.getValueAt(i, 1));
            itemMap.put("PERIOD", (Object)strategiesTable.getValueAt(i, 2));
            itemMap.put("BUY_LEVEL", (Object)strategiesTable.getValueAt(i, 3));
            itemMap.put("GAIN", (Object)strategiesTable.getValueAt(i, 4));
            itemMap.put("EMA1", (Object)strategiesTable.getValueAt(i, 5));
            itemMap.put("EMA2", (Object)strategiesTable.getValueAt(i, 6));
            itemMap.put("HIGH_BB", (Object)strategiesTable.getValueAt(i, 7));
            itemMap.put("LOW_BB", (Object)strategiesTable.getValueAt(i, 8));
            itemMap.put("STDV", (Object)strategiesTable.getValueAt(i, 9));
            itemMap.put("SMAPERIOD", (Object)strategiesTable.getValueAt(i, 10));
            itemMap.put("BUYLVL1", (Object)strategiesTable.getValueAt(i, 11));
            itemMap.put("BUYLVL2", (Object)strategiesTable.getValueAt(i, 12));
            itemMap.put("BUYLVL3", (Object)strategiesTable.getValueAt(i, 13));
            itemMap.put("SELLLVL1", (Object)strategiesTable.getValueAt(i, 14));
            itemMap.put("SELLLVL2", (Object)strategiesTable.getValueAt(i, 15));
            itemMap.put("SELLLVL3", (Object)strategiesTable.getValueAt(i, 16));
            itemMap.put("BUYLVL", (Object)strategiesTable.getValueAt(i, 17));
            itemMap.put("SELLLVL", (Object)strategiesTable.getValueAt(i, 18));
            itemMap.put("LASTPOINTS", (Object)strategiesTable.getValueAt(i, 19));
            itemMap.put("AVGPOINTS", (Object)strategiesTable.getValueAt(i, 20));
            itemMap.put("AVGMINIMUM", (Object)strategiesTable.getValueAt(i, 21));
            itemMap.put("PP_BUY", (Object)strategiesTable.getValueAt(i, 22));
            itemMap.put("PP_SELL", (Object)strategiesTable.getValueAt(i, 23));
            itemMap.put("PANIC_SELL", (Object)strategiesTable.getValueAt(i, 24));
            itemMap.put("DOUBLE_UP", (Object)strategiesTable.getValueAt(i, 25));
            itemMap.put("STOP_LIMIT", (Object)strategiesTable.getValueAt(i, 26));
            itemMap.put("BUY_ENABLED", (Object)strategiesTable.getValueAt(i, 27));
            itemMap.put("MIN_VOLUME_TO_BUY", (Object)strategiesTable.getValueAt(i, 28));
            itemMap.put("MIN_VOLUME_TO_SELL", (Object)strategiesTable.getValueAt(i, 29));
            String strName = (String)strategiesTable.getValueAt(i, 0);
            strategiesMap.put(strName, (Object)itemMap);
        }
        
        return strategiesMap;
    }
    
    public HashMap<String, Object> getMap_optioanal() {
        HashMap<String, Object> optionalMap = new HashMap<>();
        
        HashMap<String, Object> toOverrideMap = new HashMap<>();
        
        double bought_price;
        try {
            bought_price = Integer.parseInt(boughtpriceTextField.getText());
        }
        catch(Exception e) {
            bought_price = 0;
        }
        
        toOverrideMap.put("BOUGHT_PRICE", bought_price);
        optionalMap.put("toOverride", (Object)toOverrideMap);
        
        return optionalMap;
    }
    
    ////////////////////////////////////////////////////////////////////////////////
    
    public void readJSON(String jsonString) {
        Gson gsonObj = new Gson();
        java.lang.reflect.Type type = new TypeToken<HashMap<String, Object>>(){}.getType();
        HashMap<String, Object> hashMap = gsonObj.fromJson(jsonString, type);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField authorizedfromsTextField;
    private javax.swing.JSpinner botdelaySpinner;
    private javax.swing.JTextField boughtpriceTextField;
    private javax.swing.JSpinner clientportSpinner;
    private javax.swing.JCheckBox debugCheckBox;
    private javax.swing.JCheckBox enabledCheckBox;
    private javax.swing.JTable exchangesTable;
    private javax.swing.JTextField hostTextField;
    private javax.swing.JTextField hostnameTextField;
    private javax.swing.JSpinner intervaltickerupdateSpinner;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTree pairsTree;
    private javax.swing.JTextField passwordTextField;
    private javax.swing.JSpinner periodstoragetickerSpinner;
    private javax.swing.JSpinner port_imaglistenerSpinner;
    private javax.swing.JSpinner port_wsSpinner;
    private javax.swing.JCheckBox rejectunauthorizedCheckBox;
    private javax.swing.JCheckBox retrytvorderCheckBox;
    private javax.swing.JTable strategiesTable;
    private javax.swing.JSpinner timeoutbuySpinner;
    private javax.swing.JSpinner timeoutsellSpinner;
    private javax.swing.JCheckBox tlsCheckBox;
    private javax.swing.JSpinner tvgainSpinner;
    private javax.swing.JCheckBox tvprotectionCheckBox;
    private javax.swing.JCheckBox tvpyramidCheckBox;
    private javax.swing.JSpinner tvtradinglimitbuySpinner;
    private javax.swing.JSpinner tvtradinglimitsellSpinner;
    private javax.swing.JTextField userTextField;
    private javax.swing.JCheckBox verboseCheckBox;
    private javax.swing.JCheckBox watchmodeCheckBox;
    // End of variables declaration//GEN-END:variables
}
